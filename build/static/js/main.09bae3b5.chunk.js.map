{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/SearchBar/SearchBar.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","event","onAdd","track","onRemove","isRemoval","react_default","a","createElement","className","onClick","name","artist","album","React","Component","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","SearchBar","state","searchTerm","search","handleNameChange","onSearch","setState","target","value","placeholder","onChange","Playlist","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","searchRequest","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","findIndex","_track","push","trackIndx","splice","_this2","trackURIs","term","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09bae3b5.chunk.js","sourcesContent":["//const spotifyAuthorizeURIBase = 'https://accounts.spotify.com/authorize';\r\nconst spotifyAPIURIBase = 'https://api.spotify.com/v1/';\r\nconst clientId='e8492c4381344b0392723808bf80a98e';\r\nconst redirectUri = 'https://jammmingproject.surge.sh'\r\n//const redirectUri = 'http://localhost:3000/';\r\n\r\n\r\nlet accessToken;\r\n\r\nlet Spotify = {\r\n\r\n  getAccessToken() {\r\n    if(accessToken) {\r\n      return accessToken;\r\n    }\r\n    const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n    const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n    if(hasAccessToken&&hasExpiresIn){\r\n      accessToken = hasAccessToken[1];\r\n      const expiresIn = Number(hasExpiresIn[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n    }\r\n},\r\n\r\nsearch(searchTerm) {\r\n       const accessToken = Spotify.getAccessToken();\r\n       const searchRequest = `${spotifyAPIURIBase}search?type=track&q=${searchTerm}`\r\n       return fetch(searchRequest, {\r\n         headers: {\r\n           Authorization: `Bearer ${accessToken}`\r\n         }\r\n       }).then(response => {\r\n         return response.json();\r\n       }).then(jsonResponse => {\r\n         if (!jsonResponse.tracks) {\r\n           return [];\r\n         }\r\n         return jsonResponse.tracks.items.map(track => ({\r\n               id: track.id,\r\n               name: track.name,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               uri: track.uri\r\n           }));\r\n       });\r\n   },\r\n\r\n\r\nsavePlaylist(playlistName, trackUris) {\r\n        if (!playlistName || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` }\r\n        let userId\r\n\r\n        return fetch(`${spotifyAPIURIBase}me`, {headers: headers}\r\n            ).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`${spotifyAPIURIBase}users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: playlistName})\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`${spotifyAPIURIBase}users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris: trackUris})\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(event) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n   if(this.props.isRemoval) {\r\n    return <a className=\"Track-action\" onClick={this.removeTrack}>-</a>;\r\n    }\r\n    return <a className=\"Track-action\" onClick={this.addTrack}>+</a>;\r\n  }\r\n\r\n   render() {\r\n     return(\r\n       <div className=\"Track\">\r\n         <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n         </div>\r\n        </div>\r\n\r\n\r\n    )\r\n   }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\n\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"TrackList\">\r\n          {this.props.tracks.map(track => {\r\n                return <Track key={track.id}\r\n                        track ={track}\r\n                        onAdd ={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval}/>\r\n              })\r\n        }\r\n        </div>\r\n      );\r\n    }\r\n\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd} />\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      searchTerm:''\r\n    }\r\n    this.search=this.search.bind(this);\r\n    this.handleNameChange=this.handleNameChange.bind(this);\r\n  }\r\n\r\n\r\nsearch() {\r\n  this.props.onSearch(this.state.searchTerm);\r\n}\r\n\r\nhandleNameChange(event) {\r\n  this.setState({searchTerm:event.target.value});\r\n}\r\n\r\nrender() {\r\n   return (\r\n     <div className=\"SearchBar\">\r\n       <input placeholder=\"Enter A Song, Album, or Artist\"\r\n         onChange={this.handleNameChange} />\r\n       <a onClick={this.search}>SEARCH</a>\r\n     </div>\r\n   );\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport  TrackList from '../TrackList/TrackList';\r\n\r\n\r\n\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n    handleNameChange(event) {\r\n      this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <div className=\"Playlist\">\r\n          <input value={this.props.playlistName}\r\n                  onChange={this.handleNameChange}/>\r\n          <TrackList\r\n            onRemove={this.props.onRemove}\r\n            tracks={this.props.playlistTracks}/>\r\n          <a className=\"Playlist-save\"\r\n            onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport SearchBar from  '../SearchBar/SearchBar';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName:'New Playlist',\r\n      playlistTracks:[],\r\n    }\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n\r\n  }\r\n\r\n  // Adds track from Search Results to Playlist\r\n  addTrack(track) {\r\n  if(this.state.playlistTracks.findIndex(_track => _track.id === track.id) === -1) {\r\n    let tracks = this.state.playlistTracks\r\n    tracks.push(track)\r\n    this.setState({playlistTracks: tracks})\r\n  }\r\n}\r\n\r\n  // Removes track from Playlist (filter out track id from playlistTracks)\r\n  removeTrack(track) {\r\n   const trackIndx = this.state.playlistTracks.findIndex(_track => _track.id === track.id);\r\n    if(trackIndx > -1) {\r\n      let tracks = this.state.playlistTracks\r\n      tracks.splice(trackIndx, 1)\r\n      this.setState({playlistTracks: tracks})\r\n    }\r\n  }\r\n\r\n\r\n  // updates the name of the Playlist\r\n  updatePlaylistName(name) {\r\n     this.setState({playlistName: name})\r\n  }\r\n\r\n  // saves Playlist name and tracks to user's account\r\n  savePlayList() {\r\n    let trackURIs = this.state.playlistTracks.map(track => track.uri)\r\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\r\n      this.setState(\r\n        {\r\n          playlistName: 'New Playlist',\r\n          playlistTracks: []\r\n        })\r\n    })\r\n  }\r\n\r\n  // calls the Spotify.js (in util directory) to run a call for Spotify API, then sets state\r\n  search(term) {\r\n   Spotify.search(term)\r\n     .then(tracks => {\r\n       this.setState({ searchResults: tracks })\r\n     });\r\n }\r\n\r\n\r\n\r\n render() {\r\n    return(\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n        <SearchBar onSearch={this.search}/>\r\n         <div className=\"App-playlist\">\r\n           <SearchResults SearchResults={this.state.searchResults} onAdd={this.addTrack}  />\r\n          <Playlist playlistName ={this.state.playlistName}\r\n                    playlistTracks ={this.state.playlistTracks}\r\n                    onNameChange={this.updatePlaylistName}\r\n                    onSave={this.savePlaylist}\r\n                    onRemove={this.removeTrack}/>\r\n\r\n         </div>\r\n        </div>\r\n      </div>\r\n   );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}